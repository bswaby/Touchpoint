#Role=Edit

import re
import datetime
from datetime import datetime
from types import NoneType

model.Header = "Baptism Age Bin"

sqlJoined = '''
SELECT 
    CASE 
        WHEN p.Age >= 0 AND p.Age < 10 THEN 'Age_0_9'
        WHEN p.Age >= 10 AND p.Age < 20 THEN 'Age_10_19'
        WHEN p.Age >= 20 AND p.Age < 30 THEN 'Age_20_29'
        WHEN p.Age >= 30 AND p.Age < 40 THEN 'Age_30_39'
        WHEN p.Age >= 40 AND p.Age < 50 THEN 'Age_40_49'
        WHEN p.Age >= 50 AND p.Age < 60 THEN 'Age_50_59'
        WHEN p.Age >= 60 AND p.Age < 70 THEN 'Age_60_69'
        WHEN p.Age >= 70 AND p.Age < 80 THEN 'Age_70_79'
        WHEN p.Age >= 80 THEN 'Age_80+'
    END AS AgeBin,
    SUM(CASE WHEN YEAR(p.JoinDate) = YEAR(GETDATE()) - 0 THEN 1 ELSE 0 END) AS [Year_0],
    SUM(CASE WHEN YEAR(p.JoinDate) = YEAR(GETDATE()) - 1 THEN 1 ELSE 0 END) AS [Year_1],
    SUM(CASE WHEN YEAR(p.JoinDate) = YEAR(GETDATE()) - 2 THEN 1 ELSE 0 END) AS [Year_2],
    SUM(CASE WHEN YEAR(p.JoinDate) = YEAR(GETDATE()) - 3 THEN 1 ELSE 0 END) AS [Year_3],
    SUM(CASE WHEN YEAR(p.JoinDate) = YEAR(GETDATE()) - 4 THEN 1 ELSE 0 END) AS [Year_4],
    SUM(CASE WHEN YEAR(p.JoinDate) = YEAR(GETDATE()) - 5 THEN 1 ELSE 0 END) AS [Year_5],
    SUM(CASE WHEN YEAR(p.JoinDate) = YEAR(GETDATE()) - 6 THEN 1 ELSE 0 END) AS [Year_6],
    SUM(CASE WHEN YEAR(p.JoinDate) = YEAR(GETDATE()) - 7 THEN 1 ELSE 0 END) AS [Year_7],
    SUM(CASE WHEN YEAR(p.JoinDate) = YEAR(GETDATE()) - 8 THEN 1 ELSE 0 END) AS [Year_8],
    SUM(CASE WHEN YEAR(p.JoinDate) = YEAR(GETDATE()) - 9 THEN 1 ELSE 0 END) AS [Year_9]
FROM 
    dbo.People p
WHERE 
    p.Age IS NOT NULL
GROUP BY 
    CASE 
        WHEN p.Age >= 0 AND p.Age < 10 THEN 'Age_0_9'
        WHEN p.Age >= 10 AND p.Age < 20 THEN 'Age_10_19'
        WHEN p.Age >= 20 AND p.Age < 30 THEN 'Age_20_29'
        WHEN p.Age >= 30 AND p.Age < 40 THEN 'Age_30_39'
        WHEN p.Age >= 40 AND p.Age < 50 THEN 'Age_40_49'
        WHEN p.Age >= 50 AND p.Age < 60 THEN 'Age_50_59'
        WHEN p.Age >= 60 AND p.Age < 70 THEN 'Age_60_69'
        WHEN p.Age >= 70 AND p.Age < 80 THEN 'Age_70_79'
        WHEN p.Age >= 80 THEN 'Age_80+'
    END
ORDER BY AgeBin;
''' 

sqlBaptised = '''
SELECT 
    CASE 
        WHEN p.Age >= 0 AND p.Age < 10 THEN 'Age_0_9'
        WHEN p.Age >= 10 AND p.Age < 20 THEN 'Age_10_19'
        WHEN p.Age >= 20 AND p.Age < 30 THEN 'Age_20_29'
        WHEN p.Age >= 30 AND p.Age < 40 THEN 'Age_30_39'
        WHEN p.Age >= 40 AND p.Age < 50 THEN 'Age_40_49'
        WHEN p.Age >= 50 AND p.Age < 60 THEN 'Age_50_59'
        WHEN p.Age >= 60 AND p.Age < 70 THEN 'Age_60_69'
        WHEN p.Age >= 70 AND p.Age < 80 THEN 'Age_70_79'
        WHEN p.Age >= 80 THEN 'Age_80+'
        WHEN p.Age IS NULL THEN 'Unknown'
    END AS AgeBin,
    SUM(CASE WHEN YEAR(p.BaptismDate) = YEAR(GETDATE()) - 0 THEN 1 ELSE 0 END) AS [Year_0],
    SUM(CASE WHEN YEAR(p.BaptismDate) = YEAR(GETDATE()) - 1 THEN 1 ELSE 0 END) AS [Year_1],
    SUM(CASE WHEN YEAR(p.BaptismDate) = YEAR(GETDATE()) - 2 THEN 1 ELSE 0 END) AS [Year_2],
    SUM(CASE WHEN YEAR(p.BaptismDate) = YEAR(GETDATE()) - 3 THEN 1 ELSE 0 END) AS [Year_3],
    SUM(CASE WHEN YEAR(p.BaptismDate) = YEAR(GETDATE()) - 4 THEN 1 ELSE 0 END) AS [Year_4],
    SUM(CASE WHEN YEAR(p.BaptismDate) = YEAR(GETDATE()) - 5 THEN 1 ELSE 0 END) AS [Year_5],
    SUM(CASE WHEN YEAR(p.BaptismDate) = YEAR(GETDATE()) - 6 THEN 1 ELSE 0 END) AS [Year_6],
    SUM(CASE WHEN YEAR(p.BaptismDate) = YEAR(GETDATE()) - 7 THEN 1 ELSE 0 END) AS [Year_7],
    SUM(CASE WHEN YEAR(p.BaptismDate) = YEAR(GETDATE()) - 8 THEN 1 ELSE 0 END) AS [Year_8],
    SUM(CASE WHEN YEAR(p.BaptismDate) = YEAR(GETDATE()) - 9 THEN 1 ELSE 0 END) AS [Year_9]
FROM 
    dbo.People p
--WHERE 
--    p.Age IS NOT NULL
GROUP BY 
    CASE 
        WHEN p.Age >= 0 AND p.Age < 10 THEN 'Age_0_9'
        WHEN p.Age >= 10 AND p.Age < 20 THEN 'Age_10_19'
        WHEN p.Age >= 20 AND p.Age < 30 THEN 'Age_20_29'
        WHEN p.Age >= 30 AND p.Age < 40 THEN 'Age_30_39'
        WHEN p.Age >= 40 AND p.Age < 50 THEN 'Age_40_49'
        WHEN p.Age >= 50 AND p.Age < 60 THEN 'Age_50_59'
        WHEN p.Age >= 60 AND p.Age < 70 THEN 'Age_60_69'
        WHEN p.Age >= 70 AND p.Age < 80 THEN 'Age_70_79'
        WHEN p.Age >= 80 THEN 'Age_80+'
        WHEN p.Age is NULL THEN 'Unknown'
    END
ORDER BY AgeBin;
'''

sqldata = q.QuerySql(sqlBaptised)
records = ''
for i in sqldata:
    if records != '':
        records += ','
    
    year0 = datetime.now().year 
    year1 = datetime.now().year - 1
    year2 = datetime.now().year - 2
    year3 = datetime.now().year - 3
    year4 = datetime.now().year - 4
    year5 = datetime.now().year - 5
    year6 = datetime.now().year - 6
    year7 = datetime.now().year - 7
    year8 = datetime.now().year - 8
    year9 = datetime.now().year - 9
        
    records += '{'
    records += '''Age: "{0}",
                  year_0: {1},
                  year_1: {2},
                  year_2: {3},
                  year_3: {4},
                  year_4: {5},
                  year_5: {6},
                  year_6: {7},
                  year_7: {8},
                  year_8: {9},
                  year_9: {10}
                    '''.format(i.AgeBin,i.Year_0,i.Year_1,i.Year_2,i.Year_3,i.Year_4,i.Year_5,i.Year_6,i.Year_7,i.Year_8,i.Year_9)
    records += '}'
    
print ''' <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-grid.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-theme-alpine.css">
  <style>
    .ag-theme-alpine {
      height: 500px;
      width: 100%;
    }
  </style>

  <div id="myGrid" class="ag-theme-alpine"></div>
  <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.noStyle.js"></script>
  <script>
    // Sample data from the SQL query
    const rowData = [''' + records + '''
    ];
    
    // Get the current year
    const currentYear = new Date().getFullYear();
    
    // Helper function to calculate dynamic header names
    function getDynamicHeaderName(field) {
        const yearOffset = parseInt(field.split('_')[1]); // Extract the number after the '_'
        const headerYear = currentYear - yearOffset; // Subtract it from the current year
        return `${headerYear}`; // Format the header name Year ${yearOffset} (
    }
    
    // Flatten data to find min and max values
    const allValues = rowData.flatMap(row => Object.values(row).filter(value => typeof value === 'number'));
    const minValue = Math.min(...allValues);
    const maxValue = Math.max(...allValues);

    // Column definitions
    const columnDefs = [
      { headerName: 'Age Bin', field: 'Age', pinned: 'left', width: 240 },
      { headerName: getDynamicHeaderName('year_0'), field: 'year_0', cellStyle: getHeatmapStyle },
      { headerName: getDynamicHeaderName('year_1'), field: 'year_1', cellStyle: getHeatmapStyle },
      { headerName: getDynamicHeaderName('year_2'), field: 'year_2', cellStyle: getHeatmapStyle },
      { headerName: getDynamicHeaderName('year_3'), field: 'year_3', cellStyle: getHeatmapStyle },
      { headerName: getDynamicHeaderName('year_4'), field: 'year_4', cellStyle: getHeatmapStyle },
      { headerName: getDynamicHeaderName('year_5'), field: 'year_5', cellStyle: getHeatmapStyle },
      { headerName: getDynamicHeaderName('year_6'), field: 'year_6', cellStyle: getHeatmapStyle },
      { headerName: getDynamicHeaderName('year_7'), field: 'year_7', cellStyle: getHeatmapStyle },
      { headerName: getDynamicHeaderName('year_8'), field: 'year_8', cellStyle: getHeatmapStyle },
      { headerName: getDynamicHeaderName('year_9'), field: 'year_9', cellStyle: getHeatmapStyle },
      // Add columns for additional years dynamically if needed
    ];

  // Helper function to calculate text color (white or black) based on background brightness
  function getTextColor(hexColor) {
    const r = parseInt(hexColor.slice(1, 3), 16);
    const g = parseInt(hexColor.slice(3, 5), 16);
    const b = parseInt(hexColor.slice(5, 7), 16);
    const brightness = (r * 299 + g * 587 + b * 114) / 1000; // Standard luminance formula
    return brightness > 150 ? 'black' : 'white';
  }

  // Heatmap style function
  function getHeatmapStyle(params) {
    const value = params.value;
    if (value === undefined || value === null) {
      return { backgroundColor: 'white', color: 'black' };
    }

    // Extended heatmap color range
    const colors = [
      '#f7fbff', // Lightest
      '#deebf7',
      '#c6dbef',
      '#9ecae1',
      '#6baed6',
      '#4292c6',
      '#2171b5',
      '#08519c',
      '#08306b', // Darkest
    ];

    // Normalize value to a range between 0 and 1
    const normalizedValue = (value - minValue) / (maxValue - minValue);
    const index = Math.floor(normalizedValue * (colors.length - 1));

    const backgroundColor = colors[index];
    const textColor = getTextColor(backgroundColor);
    return { backgroundColor, color: textColor };
  }

  // Grid options
  const gridOptions = {
    columnDefs: columnDefs,
    rowData: rowData,
    defaultColDef: {
      sortable: true,
      filter: true,
      resizable: true,
    },
    onGridReady: function(params) {
      // Autosize columns when grid is ready
      params.api.sizeColumnsToFit();
    }
  };

  // Initialize the grid
  document.addEventListener('DOMContentLoaded', () => {
    const gridDiv = document.getElementById('myGrid');
    new agGrid.Grid(gridDiv, gridOptions);
  });
  </script>
'''
