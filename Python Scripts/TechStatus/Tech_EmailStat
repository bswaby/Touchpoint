#####################################################################
####TECH EMAIL REPORT INFORMATION
#####################################################################
#This will show the email success/failures from an overview perspective
#

#Installation:
#  Installation is easy, but it does require rights to Special Content.
#  1. Copy all this code
#  2. In TP, go to Admin~Advanced~Special Content~Python Scripts Tab
#  3. Select New Python Script File, Name the File, and click submit
#  4. Paste in the code and run
#  5. Add to menu if needed


#####################################################################
####USER CONFIG FIELDS
#####################################################################
#These are defined variables that are required for the report to run.

model.Header = 'Tech Email Stats' #Page Name

#######################################################################
####START OF CODE.  No configuration should be needed beyond this point
#######################################################################
#######################################################################
from datetime import datetime  # Import datetime at the beginning of the function
import datetime
from decimal import Decimal

current_date = datetime.date.today().strftime("%B %d, %Y")
sDate = model.Data.sDate
eDate = model.Data.eDate


if model.Data.HideSuccess == 'yes':
    optionHideSuccess = 'checked'
    sqlHideSuccess = ''
else:
    optionHideSuccess = ''
    sqlHideSuccess = ' AND fe.Fail IS NOT NULL '

from datetime import datetime

def generate_html_table(data, expanded_list=None, match_column=None, title=None, hide_columns=None, url_columns=None, 
                        bold_columns=None, column_order=None, divider_after_column=None, sum_columns=None, 
                        date_columns=None, column_widths=None, table_width="100%", remove_borders=False,
                        remove_header_borders=False, header_padding="5px", content_padding="5px", header_font_size="14px", 
                        content_font_size="12px", header_bg_color="#f4f4f4", slanted_headers=None, slant_angle=45, 
                        row_colors=None, header_rename=None, column_alignment=None):  
    
    if not data:
        return "<p>No data available.</p>"
    
    hide_columns = hide_columns or []
    url_columns = url_columns or {}
    bold_columns = bold_columns or []
    column_order = column_order or []
    sum_columns = sum_columns or []
    date_columns = date_columns or []
    column_widths = column_widths or {}
    slanted_headers = slanted_headers or []
    row_colors = row_colors or ["#ffffff", "#f9f9f9"]
    header_rename = header_rename or {}
    column_alignment = column_alignment or {}
    
    from datetime import datetime
    
    html = ""
    html += """
        <style>
            th.rotate {
              height: 140px;
              white-space: nowrap;
              position: relative;
            }
            
            th.rotate > div {
              transform: translate(15px, 35px) rotate(315deg); 
              width: 100%;
              position: absolute;
              top: 50%;
              left: 0;
            }
            
            th.rotate > div > span {
              border-bottom: 1px solid #ccc;
              padding: 5px 10px;
            }
        </style>
        """
    
    if title:
        html += "<h2>{}</h2>\n".format(title)
    
    headers = data[0].keys()
    
    if column_order:
        headers = [h for h in column_order if h in headers] + [h for h in headers if h not in column_order]
    
    table_style = "width: {}; border-collapse: collapse;".format(table_width)
    if remove_borders:
        table_style += " border: none;"
    
    html += '<table style="{}">\n'.format(table_style)
    
    html += "    <tr>\n"
    
    for h in headers:
        if h not in hide_columns:
            th_style = "text-align: {}; vertical-align: bottom; white-space: nowrap;"
            th_style = th_style.format(column_alignment.get(h, "center"))  # Align header as per column_alignment
            th_style += " padding: {}; font-size: {}; background-color: {};".format(header_padding, header_font_size, header_bg_color)
            
            if h in slanted_headers:
                th_style = "text-align: {}; vertical-align: bottom; white-space: nowrap; padding: {}; font-size: {};".format(column_alignment.get(h, "center"), header_padding, header_font_size)
            
            header_display_name = header_rename.get(h, h)
            
            if remove_header_borders and h not in slanted_headers:
                th_style += " border: none;"
            elif not remove_borders and h not in slanted_headers:
                th_style += " border: 1px solid #ddd;"
            
            if h in column_widths:
                th_style += " width: {};".format(column_widths[h])
    
            if h in slanted_headers:
                html += "<th class='rotate' style='{}'><div><span>{}</span></div></th>\n".format(th_style, header_display_name)
            else:
                html += "<th style='{}'>{}</th>\n".format(th_style, header_display_name)

    html += "    </tr>\n"
    
    expanded_rows = {}
    if expanded_list:
        expanded_rows = {row[match_column]: row for row in expanded_list}
    
    for idx, row in enumerate(data):
        row_color = row_colors[idx % len(row_colors)]  # Alternate row colors
        
        html += "    <tr style='background-color: {};'>\n".format(row_color)
        for h in headers:
            if h not in hide_columns:
                cell_value = row.get(h, "")
                
                # Apply header renaming to date_columns
                if h in header_rename:
                    h = header_rename[h]  # Rename the header
                
                for column in date_columns:
                    if h == column:
                        if cell_value:
                            cell_value = str(cell_value)  # Ensure it's a string
                            cell_value = cell_value.split(" ")[0]  # Take only the date part
                        else:
                            cell_value = ""  # Handle None values

                if cell_value is None:
                    cell_value = ""
                if h in bold_columns:
                    cell_value = "<b>{}</b>".format(cell_value)
                if h in url_columns and cell_value:
                    url_format = url_columns[h]
                    url_value = url_format.format(**row)
                    cell_value = '<a href="{}" target="_blank" style="color: #1e90ff; text-decoration: none;">{}</a>'.format(url_value, cell_value)
                
                alignment = column_alignment.get(h, "left")
                td_style = "text-align: {}; padding: {}; font-size: {};".format(alignment, content_padding, content_font_size)
                if h in column_widths:
                    td_style += " width: {};".format(column_widths[h])
                if not remove_borders:
                    td_style += " border: 1px solid #ddd;"
                html += "<td style='{}'>{}</td>\n".format(td_style, cell_value)
        html += "    </tr>\n"
        
        if expanded_list and row[match_column] in expanded_rows:
            expanded_row = expanded_rows[row[match_column]]
            html += "    <tr style='background-color: #e0e0e0;'>\n"
            for h in headers:
                if h not in hide_columns:
                    cell_value = expanded_row.get(h, "")
                    td_style = "padding-left: 20px; text-align: {}; font-size: {};".format(column_alignment.get(h, "left"), content_font_size)
                    html += "<td style='{}'>{}</td>\n".format(td_style, cell_value)
            html += "    </tr>\n"
        
    if sum_columns:
        sums = {col: 0 for col in sum_columns}
        for row in data:
            for col in sum_columns:
                if isinstance(row.get(col), (int, float)):
                    sums[col] += row[col]

        html += "    <tr>\n"
        for h in headers:
            if h not in hide_columns:
                if h in sum_columns:
                    html += "<td style='padding: 3px 4px; text-align: left; font-weight: bold; border: none;'>{}</td>\n".format(sums[h])
                else:
                    html += "<td style='padding: 3px 4px; text-align: left; border: none;'>&nbsp;</td>\n"
        html += "    </tr>\n"
    
    html += "</table>\n"
    return html




sql = '''
SELECT 
    COALESCE(fe.Fail, 'Sent') AS Status,  
    COUNT(*) AS TotalCount
FROM EmailQueueTo eqt
LEFT JOIN FailedEmails fe ON fe.Id = eqt.Id aND fe.PeopleId = eqt.PeopleId  -- Adjust join column if needed
LEFT JOIN Organizations o ON o.OrganizationId = eqt.OrgId
LEFT JOIN Division d ON d.Id = o.DivisionId
LEFT JOIN Program pro ON pro.Id = d.ProgId
WHERE eqt.Sent BETWEEN '{0} 00:00:00' AND '{1} 23:59:59.999' {2} {3}
GROUP BY COALESCE(fe.Fail, 'Sent')
ORDER BY TotalCount DESC;
'''
sqlOrgStat = '''
   DECLARE @DynamicColumns NVARCHAR(MAX);
    DECLARE @SQLQuery NVARCHAR(MAX);
    
    -- Step 1: Retrieve unique fe.Fail values dynamically
    SELECT @DynamicColumns = STRING_AGG(QUOTENAME(Fail), ', ')
    FROM (SELECT DISTINCT Fail FROM FailedEmails WHERE Fail IS NOT NULL) AS Failures;
    
    -- Ensure @DynamicColumns is not NULL
    IF @DynamicColumns IS NULL 
        SET @DynamicColumns = '[Sent]';
    
    -- Step 2: Construct the Dynamic SQL Query
    SET @SQLQuery = '
    SELECT *
    FROM (
        SELECT 
            eqt.OrgId,
			eqt.id,
            pro.Name AS Program,
			eq.Subject,
			CAST(eqt.Sent AS DATE) AS SentDate,
            o.OrganizationName,
            COALESCE(fe.Fail, ''Sent'') AS Status,  
            COUNT(*) AS TotalCount
        FROM EmailQueueTo eqt
        LEFT JOIN FailedEmails fe ON fe.Id = eqt.Id AND fe.PeopleId = eqt.PeopleId  
		LEFT JOIN EmailQueue eq ON eq.Id = eqt.Id
        LEFT JOIN Organizations o ON o.OrganizationId = eqt.OrgId
        LEFT JOIN Division d ON d.Id = o.DivisionId
        LEFT JOIN Program pro ON pro.Id = d.ProgId
        WHERE eqt.Sent BETWEEN ''{0} 00:00:00'' AND ''{1} 23:59:59.999'' {2} {3}
        GROUP BY COALESCE(fe.Fail, ''Sent''), eqt.OrgId, o.OrganizationName, pro.Name,eq.Subject,CAST(eqt.Sent AS DATE),eqt.id
    ) SourceTable
    PIVOT (
        SUM(TotalCount) 
        FOR Status IN (' + @DynamicColumns + ')
    ) PivotTable
    ORDER BY Program, OrganizationName;';
    
    -- Step 3: Execute the Dynamic SQL
    EXEC(@SQLQuery);
'''


sqlOrgDetails = '''
SELECT eqt.id, eq.Subject, CAST(eqt.Sent AS DATE) AS SentDate, eqt.OrgId
FROM EmailQueueTo eqt
LEFT JOIN EmailQueue eq ON eq.Id = eqt.Id
LEFT JOIN FailedEmails fe ON fe.Id = eqt.Id aND fe.PeopleId = eqt.PeopleId
WHERE eqt.Sent BETWEEN '{0} 00:00:00' AND '{1} 23:59:59.999' {2}
GROUP BY eqt.id, eq.Subject, CAST(eqt.Sent AS DATE), eqt.OrgId
ORDER BY OrgId, SentDate;
'''


sqlUserFailedStat = '''
SELECT 
	eqt.PeopleId,
	p.Name,
    fe.Fail AS Status,  
    COUNT(*) AS TotalCount,
    p.SendEmailAddress1,
	p.EmailAddress,
	p.SendEmailAddress2,
	p.EmailAddress2
FROM EmailQueueTo eqt
LEFT JOIN FailedEmails fe ON fe.Id = eqt.Id aND fe.PeopleId = eqt.PeopleId  -- Adjust join column if needed
LEFT JOIN Organizations o ON o.OrganizationId = eqt.OrgId
LEFT JOIN Division d ON d.Id = o.DivisionId
LEFT JOIN Program pro ON pro.Id = d.ProgId
LEFT JOIN People p ON p.PeopleId = eqt.PeopleId
WHERE eqt.Sent BETWEEN '{0} 00:00:00' AND '{1} 23:59:59.999' {2} {3}
GROUP BY fe.Fail, eqt.PeopleId, p.Name,	p.EmailAddress,p.EmailAddress2,p.SendEmailAddress1,p.SendEmailAddress2
ORDER BY TotalCount DESC;
'''

sqlPrograms = """select Id, Name AS ProgramName From Program Order by Name"""


if sDate is not None:
    optionsDate = ' value="' + sDate + '"'

if eDate is not None:
    optioneDate = ' value="' + eDate + '"'


frmProgramOption = """
    <label for="program" id="program">Program:</label>
    <select name="program" id="program">
        <option value="999999">All</option>
    """

rsqlPrograms = q.QuerySql(sqlPrograms)



for sp in rsqlPrograms:
    if str(model.Data.program) == str(sp.Id):
        frmProgramOption +=  """<option value="{0}" selected="selected">{1}</option>""".format(sp.Id, sp.ProgramName)
    else:
        frmProgramOption +=  """<option value="{0}">{1}</option>""".format(sp.Id, sp.ProgramName)

frmProgramOption += """</select>"""

filterProgram = '' if model.Data.program == str(999999) else ' AND pro.Id = {}'.format(model.Data.program) if model.Data.program else ''


headerTemplate = '''
    <form action="" method="GET">
        <label for="sDate">Start:</label>
        <input type="date" id="sDate" name="sDate" required {0}>
        <label for="eDate">End:</label>
        <input type="date" id="eDate" name="eDate" required {1}>
        {3}
        <input type="submit" value="Submit">
        <p style="margin: 0; padding: 0;">
            <input type="checkbox" id="HideSuccess" name="HideSuccess" value="yes" {2}>
            <label for="HideSuccess" class="no-print">Show Successfully Sent <i>(This is slow)</i></label>
        </p>
    </form>
'''.format(optionsDate,optioneDate,optionHideSuccess,frmProgramOption)

rsql = q.QuerySql(sql.format(sDate,eDate,sqlHideSuccess,filterProgram))

TotalEmails = 0
bodyTemplate = ''


####### Total Stats #######

# Extract relevant attributes (ignoring anything that starts with "_")
data_list = [{attr: getattr(row, attr) for attr in dir(row) if not attr.startswith("_")} for row in rsql]


####advanced sub columns
#expanded_list=expanded_list 
#match_column="OrgId"

# Define all dictionaries separately
table_config = {
    "title": "Total Stats",
    "table_width": "auto", #'auto'  # or use '1000px' or 'auto'
    "remove_borders": True,
}

column_settings = {
    "hide_columns": ['PeopleId'],
    "column_order": ['Status'],
    "divider_after_column": "", #Adds a vertical line the table to seperate
}

formatting = {
    "bold_columns": [''], 
    "date_columns": [''],  #supposed to set to date only w/o time, but needs work
    "sum_columns": ['TotalCount'],
    "row_colors": ["#f9f9f9", "#ffffff"],  # Alternating row colors
}

column_widths = {
    'some column': '20%',
}

url_columns = {
    '': '', #add's url link to columns. Example: 'Name': '/Person2/{PeopleId}'  Typically using in conjuction with hide_columns
}

header_rename = {
    "TotalCount": "Total",
}

header_style = {
    "header_padding": "6px 10px",
    "header_font_size": "14px",
    "header_bg_color": "#f0f0f0",
    "remove_header_borders": True,
}

content_style = {
    "content_padding": "3px 8px",
    "content_font_size": "12px",
}

column_alignment = {
    "Name": "left", 
    "Status": "left", 
}

slanted_headers_config = {
    "slanted_headers": [''], #kinda works, but not aligning 100%.  Still some css work to do
    "slant_angle": 45, #not working
}


# Merge all settings into a single dictionary
merged_settings = {}
merged_settings.update(table_config)
merged_settings.update(column_settings)
merged_settings.update(formatting)
merged_settings.update(header_style)
merged_settings.update(content_style)
merged_settings.update(slanted_headers_config)
merged_settings.update({"header_rename": header_rename})  
merged_settings.update({"column_alignment": column_alignment}) 

# Now pass everything at once (Python 2 allows only ONE **kwargs)
bodyTemplate += generate_html_table(
    data_list, 
    column_widths=column_widths, 
    url_columns=url_columns, 
    **merged_settings
)


####### Involvement Stats #######
rsqlOrgStat = q.QuerySql(sqlOrgStat.format(sDate,eDate,sqlHideSuccess,filterProgram))
#rsqlOrgDetails = q.QuerySql(sqlOrgDetails.format(sDate,eDate,sqlHideSuccess))


# Extract relevant attributes (ignoring anything that starts with "_")
data_list = [{attr: getattr(row, attr) for attr in dir(row) if not attr.startswith("_")} for row in rsqlOrgStat]

# Define all dictionaries separately
table_config = {
    "title": "Involvement Stats",
    "table_width": "auto",
    "remove_borders": False,
}

column_settings = {
    "hide_columns": ['OrgId', 'id'],
    "column_order": ['Program', 'OrganizationName', 'Subject', 'SentDate'],
    "divider_after_column": "OrganizationName",
}

formatting = {
    "bold_columns": ['Program'],
    "date_columns": ['Sent'], #Removes the time
    "sum_columns": ['Technical', 'Invalid Address', 'bouncedaddress', 'spamreport', 
                    'Unclassified', 'Mailbox Unavailable', 'Reputation', 'Content', 
                    'invalid', 'spamreporting'],
    "row_colors": ["#f9f9f9", "#ffffff"],  # Alternating row colors
}

column_widths = {
    'OrgId': '20%',
    'Program': '150px',
    'SentDate': 'auto',
    'TotalCount': '100px',
}

url_columns = {
    'Involvement': '/Org/{OrgId}',
    'Email Subject': '/Manage/Emails/Details/{id}',
}

header_rename = {
    "OrganizationName": "Involvement",
    "Subject": "Email Subject",
    "SentDate": "Sent",
}

header_style = {
    "header_padding": "8px 12px",
    "header_font_size": "14px",
    "header_bg_color": "#FFFFFF",
    "remove_header_borders": True,
}

content_style = {
    "content_padding": "5px 10px",
    "content_font_size": "12px",
}

column_alignment = {
    "Program": "left", 
    "OrganizationName": "left", 
    "Subject": "left", 
    "SentDate": "left", 
}

slanted_headers_config = {
    "slanted_headers": ['Technical', 'Invalid Address', 'bouncedaddress', 'spamreport', 
                        'Unclassified', 'Mailbox Unavailable', 'Reputation', 'Content', 
                        'invalid', 'spamreporting'],
    "slant_angle": 45,
}

# Merge all settings into a single dictionary
merged_settings = {}
merged_settings.update(table_config)
merged_settings.update(column_settings)
merged_settings.update(formatting)
merged_settings.update(header_style)
merged_settings.update(content_style)
merged_settings.update(slanted_headers_config)
merged_settings.update({"header_rename": header_rename})  
merged_settings.update({"column_alignment": column_alignment}) 

# Now pass everything at once (Python 2 allows only ONE **kwargs)
bodyTemplate += generate_html_table(
    data_list, 
    column_widths=column_widths, 
    url_columns=url_columns, 
    **merged_settings
)



###### User Failed Stats  ######
rsqlUserFailedStat = q.QuerySql(sqlUserFailedStat.format(sDate,eDate,sqlHideSuccess,filterProgram))

# Extract relevant attributes (ignoring anything that starts with "_")
data_list = [{attr: getattr(row, attr) for attr in dir(row) if not attr.startswith("_")} for row in rsqlUserFailedStat]

# Define all dictionaries separately
table_config = {
    "title": "User Stats",
    "table_width": "auto",  # or use '1000px' or 'auto'
    "remove_borders": True,
}

column_settings = {
    "hide_columns": ['PeopleId'],
    "column_order": ['Name', 'TotalCount','Status'],
    "divider_after_column": "",  # Adds a vertical line the table to separate
}

formatting = {
    "bold_columns": [''],
    "date_columns": [''],  # Supposed to set to date only w/o time, but needs work
    "sum_columns": ['Total Count'],
    "row_colors": ["#f9f9f9", "#ffffff"],  # Alternating row colors
}

column_widths = {
    'some column': '20%',
}

url_columns = {
    'Name': '/Person2/{PeopleId}',  # Adds url link to columns, typically used in conjunction with hide_columns
}

header_rename = {
    "Organization": "Involvement",
}

header_style = {
    "header_padding": "6px 10px",
    "header_font_size": "14px",
    "header_bg_color": "#f0f0f0",
    "remove_header_borders": True,
}

content_style = {
    "content_padding": "3px 8px",
    "content_font_size": "12px",
}

column_alignment = {
    "Name": "left", 
    "Status": "left", 
}

slanted_headers_config = {
    "slanted_headers": [''],  # Kinda works, but not aligning 100%. Still needs some CSS work
    "slant_angle": 45,  # Not working yet
}



# Merge all settings into a single dictionary
merged_settings = {}
merged_settings.update(table_config)
merged_settings.update(column_settings)
merged_settings.update(formatting)
merged_settings.update(header_style)
merged_settings.update(content_style)
merged_settings.update(slanted_headers_config)
merged_settings.update({"header_rename": header_rename})  
merged_settings.update({"column_alignment": column_alignment}) 


# Now pass everything at once (Python 2 allows only ONE **kwargs)
bodyTemplate += generate_html_table(
    data_list, 
    column_widths=column_widths, 
    url_columns=url_columns, 
    **merged_settings
)


Report = model.RenderTemplate(headerTemplate)
Report += model.RenderTemplate(bodyTemplate)
print Report
