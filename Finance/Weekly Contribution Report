#####################################################################
####REPORT INFORMATION
#####################################################################
#Contribution totals is a tool to aide financials in verifying their books.  
#To use this tool just create a Python script by going to Admin ~ 
#Advanced ~ Special Content and then click on the python tab

#####################################################################
####USER CONFIG FIELDS
#####################################################################
#User config is done within the script itself.  Just copy this script to 
#a new Python file and run.  The script will prompt if a config file has
#not been created

#####################################################################
####START OF CODE.  No configuration should be needed beyond this point
#####################################################################

#global

######################
##Config File Section
######################
from datetime import datetime

#remove negative values
def checkNeg(value):
    if value == -0.0:
        return "-"
    else:
        return "${:,.2f}".format(value)


#config file name
ConfigFile = 'ConfigFinanceSummaryReport'

#Pull config text file
data = model.DynamicDataFromJson(model.TextContent(ConfigFile))    

#If text file doesn't exit, present message nad option to set with default values
json = ''
if not data:
    json = '''
            {
                "Script": {
                    "HeaderName": "Add title here",
                    "LastUpdatedBy": "",
                    "UpdatedLast": ""
                },
                "Email": {
                    "FromName": "John Smith",
                    "FromAddress": "jsmith@noreply.com",
                    "Subject": "Add Email Title Here",
                },
                "Financial": {
                    "ExcludedFundIds": "1307",
                    "GeneralFundIds": "1",
                    "BundleReportName": "BundleReport3",
                }
            }
        '''
    data = model.DynamicDataFromJson(json)

#############Determine if values are from url or json.
#Script
HeaderName = str(model.Data.HeaderName) if model.Data.HeaderName else str(data.Script.HeaderName)
LastUpdatedBy = model.UserName
UpdatedLast = datetime.now()
#Email
FromName = str(model.Data.FromName) if model.Data.FromName else str(data.Email.FromName)
FromAddress = str(model.Data.FromAddress) if model.Data.FromAddress else str(data.Email.FromAddress)
Subject = str(model.Data.Subject) if model.Data.Subject else str(data.Email.Subject)
#Financial
ExcludedFundIds = str(model.Data.ExcludedFundIds) if model.Data.ExcludedFundIds else str(data.Financial.ExcludedFundIds)
GeneralFundIds = str(model.Data.GeneralFundIds) if model.Data.GeneralFundIds else str(data.Financial.GeneralFundIds)
BundleReportName = str(model.Data.BundleReportName) if model.Data.BundleReportName else str(data.Financial.BundleReportName)

print '''  
        <style>
            /* Popup container */
            .popup {
                display: none;
                position: fixed;
                z-index: 1;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                overflow: auto;
                background-color: rgba(0,0,0,0.4);
            }
    
            /* Popup content */
            .popup-content {
                background-color: #fefefe;
                margin: 15% auto;
                padding: 20px;
                border: 1px solid #888;
                width: 80%;
            }
    
            /* Show the popup when the URL has #popup */
            .popup:target {
                display: block;
            }
        }
            
            
        </style>'''


if model.Data.EditParams == 'y':

    #Set json file to write back
    Newjson = '''
    {
        "Script": {
            "HeaderName": "''' + HeaderName + '''",
            "LastUpdatedBy": "''' + LastUpdatedBy + '''",
            "UpdatedLast": "''' + str(UpdatedLast) + '''"
        },
        "Email": {
            "FromName": "''' + FromName + '''",
            "FromAddress": "''' + FromAddress + '''",
            "Subject": "''' + Subject + '''",
        },
        "Financial": {
            "ExcludedFundIds": "''' + ExcludedFundIds + '''",
            "GeneralFundIds": "''' + GeneralFundIds + '''",
            "BundleReportName": "''' + BundleReportName + '''",
        }
    }
    '''

    #write json file back
    model.WriteContentText(ConfigFile, Newjson)
    print '''
        <!-- Go Back Button -->
        <button onclick="goBack()">Go Back</button>
        
        <script>
        // Function to remove query parameters and anchors from a URL
        function cleanUrl(url) {
          var cleanUrl = url.split('?')[0]; // Remove query parameters (if any)
          cleanUrl = cleanUrl.split('#')[0]; // Remove anchor (if any)
          return cleanUrl;
        }
        
        // Function for going back to the previous page with a cleaned URL
        function goBack() {
          var referrer = document.referrer; // Get the previous page's URL
          if (referrer) {
            // Clean the referrer URL (remove query params and anchors)
            var cleanedReferrer = cleanUrl(referrer);
            // Go to the cleaned URL
            window.location.href = cleanedReferrer;
          } else {
            // If there is no referrer, just go back using history.back()
            window.history.back();
          }
        }
        </script>
        <br>
        <h3>Parameters Updated</h3>'''
else:
    if json != '':
        print '''<h3>Config file does not exist.  You must set it first before script will run.</h2>'''

    print '''
        <!-- Link to open the popup -->
        <a href="#popup">Edit Parameters</a>
        
        <!-- The popup container -->
        <div id="popup" class="popup">
            <!-- Popup content -->
            <div class="popup-content">
                <a href="#">Close</a>
    
                <form action="" method="get">
                    <input type="hidden" name="EditParams" value="y">
                    <h4>Script Parameters</h4>
                    <label for="email">Form Name:</label>
                    <input type="text" id="HeaderName" name="HeaderName" value="{0}"><br>
                    <hr>
                    <h4>Email Parameters</h4>
                    <label for="FromName">From Name:</label>
                    <input type="text" id="FromName" name="FromName" value="{1}"><br>
                    <label for="FromAddress">From Address:</label>
                    <input type="text" id="FromAddress" name="FromAddress" value="{2}"><br>
                    <label for="Subject">Email Subject:</label>
                    <input type="text" id="Subject" name="Subject" value="{3}"><br>
                    <hr>
                    <h4>Financial Parameters</h4>
                    <i>seperate funds by a comma.  example: 1,11,12</i></br>
                    <label for="ExcludedFundIds">Excluded Funds:</label>
                    <input type="text" id="ExcludedFundIds" name="ExcludedFundIds" value="{4}"><br>
                    <label for="GeneralFundIds">General Fund:</label>
                    <input type="text" id="GeneralFundIds" name="GeneralFundIds" value="{5}"><br>
                    <label for="BundleReportName">Bundle Report Name:</label>
                    <input type="text" id="Subject" name="BundleReportName" value="{6}"><br>
                    <i>The bundle you are using can be found under Custom Batch Report in Admin ~ Settings ~ Finance ~ Batches</i><br><br>
                    <input type="submit" value="Submit">
                    <br><br><i>Last updated by {7} on {8}</i>
                </form>
            </div>
        </div>
    '''.format(HeaderName,FromName,FromAddress,Subject,ExcludedFundIds,GeneralFundIds,BundleReportName,LastUpdatedBy,UpdatedLast)
    

    model.Header = HeaderName#"Weekly Contribution Totals" #Set to the name you want to call the page
    
    import re
    import locale
    from types import NoneType
    
    
    #Get URL Variables
    sDate = model.Data.sDate
    eDate = model.Data.eDate
    DateSearch = model.Data.DateSearch
    sendReport = model.Data.sendReport
    ShowDesignatedDetails = model.Data.ShowDesignatedDetails
    
    #set form parameters 
    if DateSearch == 'contributed':
        optionContributed = 'checked'
        optionDeposited = ''
        searchDate = 'bl.DepositDate'
    elif DateSearch == 'deposited':
        optionContributed = ''
        optionDeposited = 'checked'
        searchDate = 'bl.DepositDate'
    else:
        optionContributed = 'checked'
        optionDeposited = ''
        searchDate = 'bl.DepositDate'
        
    if sDate is not None:
        optionsDate = ' value="' + sDate + '"'
        searchsDate = sDate
    else:
        searchsDate = '2024-10-29'
    
    if eDate is not None:
        optioneDate = ' value="' + eDate + '"'
        searcheDate = eDate
    else:
        searcheDate = '2024-11-04'
    
    if ShowDesignatedDetails == 'yes':
        optionShowDesignatedDetails = 'checked'
    else:
        optionShowDesignatedDetails = ''
    
    sqlold = '''
      select 
       bl.HeaderType
      --,bl.[open]
      ,sum(case when c.FundId in ({4}) THEN c.contributionAmount ELSE 0 END) AS GeneralSum
      ,sum(case when c.FundId Not IN ({4}) THEN c.ContributionAmount ELSE 0 END) As DesignatedSum
      from bundledetail bd 
      left join contribution c on c.ContributionId = bd.ContributionId
      left join bundlelist bl on bl.BundleHeaderId = bd.BundleHeaderId
      where {2} BETWEEN '{0}' AND '{1}' AND c.FundId Not In ({3}) --bl.DepositDate BETWEEN '20241029' AND '20241104' 
      --AND bl.[open] = 1
      Group by bl.HeaderType--,bl.[open]
      Order By bl.HeaderType
    '''
    
    sql = '''
        with bundlereport as (
        Select 
        bl.HeaderType
        ,case when cb.FundId in ({4}) THEN sum(cb.ContributionAmount) ELSE 0 END AS General
        ,case when ct.id <> 99 and cb.fundId not in ({4}) THEN sum(cb.ContributionAmount) ELSE 0 End as Designated
        ,case when ct.id = 99 THEN sum(cb.ContributionAmount) ELSE 0 End as NonContribution
        FROM [CMS_fbchville].[dbo].[ContributionsBasic] cb
        LEFT JOIN BundleDetail bd ON cb.ContributionId = bd.ContributionId
        LEFT JOIN BundleList bl ON bl.BundleHeaderId = bd.BundleHeaderId
        LEFT JOIN lookup.ContributionType ct ON ct.Id = cb.ContributionTypeId
        LEFT JOIN ContributionFund cf ON cf.FundId = cb.FundId
        Where ContributionDate BETWEEN '{0}' AND '{1}'
        Group By bl.HeaderType,cb.BundleReferenceId,ct.[Description],ct.Id,cb.FundId,bd.BundleHeaderId,cf.FundDescription)
        
        Select HeaderType
        ,sum(General) as General
        ,sum(Designated) as Designated
        ,sum(NonContribution) as NonContribution
        ,sum(General) + sum(Designated)  AS TotalContribution
        ,sum(General) + sum(Designated) + sum(NonContribution) AS Total
        From bundlereport
        Group By HeaderType
    '''
    
    sqlDetailsold = '''
      select 
        bl.HeaderType
       ,Concat(bl.ReferenceId, ' (',bl.BundleHeaderId, ')') AS ReferenceId
        ,bl.BundleHeaderId
       ,FORMAT(bl.DepositDate, 'yyyy-MM-dd') as DepositDate
       ,bl.[open]
       ,sum(case when c.FundId in ({4}) THEN c.contributionAmount ELSE 0 END) AS GeneralSum
       ,sum(case when c.FundId Not IN ({4})  THEN c.ContributionAmount ELSE 0 END) As DesignatedSum
       ,bst.[Description] as BundleStatus
      from bundledetail bd 
      left join contribution c on c.ContributionId = bd.ContributionId
      left join bundlelist bl on bl.BundleHeaderId = bd.BundleHeaderId
      LEFT JOIN lookup.BundleStatusTypes bst on bl.BundleStatusId = bst.Id
      where  bl.DepositDate BETWEEN '{0}' AND '{1}' AND bl.HeaderType = '{2}' AND c.FundId Not In ({3})
      Group By --c.FundId
        bl.HeaderType
       ,bl.BundleHeaderId
       ,bl.ReferenceId
       ,bl.DepositDate
       ,bl.PostingDate
       ,bl.[open]
       ,bst.[Description]
      Order By bl.BundleHeaderId
    '''
    
    sqlDetails = '''
        with bundlereport as (
        Select 
        bl.HeaderType
        ,bd.BundleHeaderId
        ,bst.[Description] AS BundleStatus
        ,FORMAT(bl.DepositDate, 'yyyy-MM-dd') as DepositDate
        ,concat(cb.BundleReferenceId,' (',bd.BundleHeaderId,')') AS ReferenceId
        ,case when cb.FundId = 1 THEN sum(cb.ContributionAmount) ELSE 0 END AS General
        ,case when ct.id <> 99 and cb.fundId <> 1 THEN sum(cb.ContributionAmount) ELSE 0 End as Designated
        ,case when ct.id = 99 THEN sum(cb.ContributionAmount) ELSE 0 End as NonContribution
        FROM [CMS_fbchville].[dbo].[ContributionsBasic] cb
        LEFT JOIN BundleDetail bd ON cb.ContributionId = bd.ContributionId
        LEFT JOIN BundleList bl ON bl.BundleHeaderId = bd.BundleHeaderId
        LEFT JOIN lookup.ContributionType ct ON ct.Id = cb.ContributionTypeId
        LEFT JOIN ContributionFund cf ON cf.FundId = cb.FundId
        LEFT JOIN lookup.BundleStatusTypes bst ON bst.Id = bl.BundleStatusId
        Where ContributionDate BETWEEN '{0}' AND '{1}' and bl.HeaderType = '{2}'
        Group By bl.HeaderType,cb.BundleReferenceId,ct.[Description],ct.Id,cb.FundId,bd.BundleHeaderId,cf.FundDescription,bst.[Description],bl.DepositDate)
        
        Select 
        ReferenceId
        ,BundleHeaderId
        ,HeaderType
        ,BundleStatus
        ,DepositDate
        ,sum(General) as General
        ,sum(Designated) as Designated
        ,sum(NonContribution) as NonContribution
        ,sum(General) + sum(Designated)  AS TotalContribution
        ,sum(General) + sum(Designated) + sum(NonContribution) AS Total
        From bundlereport
        Group By HeaderType,ReferenceId,BundleHeaderId,BundleStatus,DepositDate


    
    '''
    
    sqlFundDetailsold = '''
    
    select 
     concat(cf.FundName, ' (',c.FundId, ')') AS Fund
     , bd.BundleHeaderID
     , sum(c.contributionamount) AS ContributionAmount 
    from BundleDetail bd
    LEFT JOIN Contribution c ON c.ContributionId = bd.ContributionId
    LEFT JOIN ContributionFund cf ON cf.FundId = c.FundId
    Where bd.BundleHeaderId = {0} and c.fundId Not In ({1})
    Group by c.FundId, cf.FundName, bd.BundleHeaderId
    Order by c.FundId
    
    '''
    
    sqlFundDetails = '''
        with bundlereport as (
        Select 
        bl.HeaderType
        ,concat(cf.FundDescription,' (',cb.FundId,')') AS Fund
        ,bd.BundleHeaderId
        ,bst.[Description] AS BundleStatus
        ,concat(cb.BundleReferenceId,' (',bd.BundleHeaderId,')') AS ReferenceId
        ,case when cb.FundId = 1 THEN sum(cb.ContributionAmount) ELSE 0 END AS General
        ,case when ct.id <> 99 and cb.fundId <> 1 THEN sum(cb.ContributionAmount) ELSE 0 End as Designated
        ,case when ct.id = 99 THEN sum(cb.ContributionAmount) ELSE 0 End as NonContribution
        FROM [CMS_fbchville].[dbo].[ContributionsBasic] cb
        LEFT JOIN BundleDetail bd ON cb.ContributionId = bd.ContributionId
        LEFT JOIN BundleList bl ON bl.BundleHeaderId = bd.BundleHeaderId
        LEFT JOIN lookup.ContributionType ct ON ct.Id = cb.ContributionTypeId
        LEFT JOIN ContributionFund cf ON cf.FundId = cb.FundId
        LEFT JOIN lookup.BundleStatusTypes bst ON bst.Id = bl.BundleStatusId
        Where bd.BundleHeaderId = {0}
        Group By bl.HeaderType,cb.BundleReferenceId,ct.[Description],ct.Id,cb.FundId,bd.BundleHeaderId,cf.FundDescription,bst.[Description],cf.FundDescription)
        
        Select 
        ReferenceId
        ,Fund
        ,BundleHeaderId
        ,HeaderType
        ,BundleStatus
        ,sum(General) as General
        ,sum(Designated) as Designated
        ,sum(NonContribution) as NonContribution
        ,sum(General) + sum(Designated)  AS TotalContribution
        ,sum(General) + sum(Designated) + sum(NonContribution) AS Total
        From bundlereport
        Group By HeaderType,ReferenceId,BundleHeaderId,BundleStatus,Fund
        Order By General Desc, Designated Desc, NonContribution Desc, HeaderType
        
    '''
    
    template = ''
    #  background-color: #dddddd;
    template += '''
    <style>
    
    
    #trnoborder {
      border: 1px solid #dddddd;
      text-align: left;
      padding: 10px;
      font-family: arial, sans-serif;
      border-collapse: collapse;
      max-width: 1000px; /* Maximum width of the table */
      width: 100%; /* Table adjusts to fit container */
    }
    
    tr:nth-child(even) {e
    
    }
    td {
        padding: 0 4px 0 4px; /* Top, Right, Bottom, Left */
    }
    .left-border {
        border-left: 1px solid black;
        background-color: lightblue;
    }
    .top-border {
        border-bottom: 1px dashed lightblue;
    }
    .total-cell {
        background-color: lightblue;
    }
    </style>'''
        
        
    #not used...but leaving here in case I add back in ability to select to search by contributed or 
    #deposited dates.  also need to consider adding option to spit out non-contribution as those is 
    #currently hidden from the query results... if it is added, need to look at the query as those are 
    #pulling from an account vs fund and will need to detail that out a little differently
    datesearch = '''
            Search On Date:
            <label>
              <input type="radio" name="DateSearch" value="contributed" {0}>
              Contributed
            </label>h
            <label>
              <input type="radio" name="DateSearch" value="deposited" {1}>
              Deposited
            </label>
            </br>
    '''
    
    # set form date fields and table headers for bundle summary
    template += '''
        <form action="" method="GET">
            <label for="sDate">Start Date:</label>
            <input type="date" id="sDate" name="sDate" required {2}>
            <label for="eDate">End Date:</label>
            <input type="date" id="eDate" name="eDate" required {3}>
            <input type="checkbox" id="ShowDesignatedDetails" name="ShowDesignatedDetails" value="yes" {4}>
            <label for="ShowDesignatedDetails">Show Details</label>
            <input type="submit" value="Filter">
        </form>
    
        <h2>Summary</h2>
        <table id="trnoborder">
            <tr id="trnoborder">
                <td><h4>Bundle Type</h4></td>
                <td><h4>General</h4></td>
                <td><h4>Designated</h4></td>
                <td><h4>NC</h4></td>
                <td class="left-border"><h4>Contribution</h4></td>
                <td class="total-cell"><h4>Grand</h4></td>
            </td>
    '''.format(optionContributed,optionDeposited,optionsDate,optioneDate,optionShowDesignatedDetails)
    
    #bundle summary query
    sql = q.QuerySql(sql.format(searchsDate,searcheDate,searchDate,ExcludedFundIds,GeneralFundIds))
    
    #set variables for bundle summary
    GrandTotalGenDes = 0.00
    GrandTotalGen = 0.00
    GrandTotalDes = 0.00
    GrandTotalNon = 0.00
    GrandTotal = 0.00
    
    #loop through bundle summary
    for d in sql:
        
        #Row Totals
        TotalGenDes = d.General + d.Designated
        #Column Totals
        GrandTotalGenDes += TotalGenDes 
        GrandTotalGen += d.General
        GrandTotalDes += d.Designated
        GrandTotalNon += d.NonContribution
        GrandTotal += d.General + d.Designated + d.NonContribution
    
        #Summary Details
        template += '''<tr>
                <td>{0}</td>
                <td>{1}</td>
                <td>{2}</td>
                <td>{3}</td>
                <td class="left-border">{4}</td>
                <td class="total-cell">{5}</td>
                </tr>
            '''.format(d.HeaderType,checkNeg(d.General),checkNeg(d.Designated),checkNeg(d.NonContribution),checkNeg(d.TotalContribution),checkNeg(d.Total))
    
    template += '''
            <tr>
                <td><h4></h4></td>
                <td><h4>{0}</h4></td>
                <td><h4>{1}</h4></td>
                <td><h4>{2}</h4></td>
                <td class="left-border"><h4>{3}</h4></td>
                <td class="total-cell"><h4>{4}</h4></td>
            </tr>
        </table></br>
        '''.format(checkNeg(GrandTotalGen),checkNeg(GrandTotalDes),checkNeg(GrandTotalNon),checkNeg(GrandTotalGenDes),checkNeg(GrandTotal))
    
    
    template +=  '''<hr><h2>Details</h2>'''
    
    #set Variables
    FundId = ''
    cType = ''

    
    #loop through bundle type showing batch details for each
    for d in sql:
        if d.ContributionTypeId is None:
            ContributionTypeId = 'is Null'
        else:
            ContributionTypeId = '= ' + str(d.ContributionTypeId)
        
        #detail data pull
        sqlDetailsData = q.QuerySql(sqlDetails.format(searchsDate,searcheDate,d.HeaderType,ExcludedFundIds,GeneralFundIds))
        
        #set table for each bundle
        template += '''
            <table>
            <tr>
                <td><h4>{0} &nbsp</h4></td>
            </tr>'''.format(d.HeaderType,d.GeneralSum,d.DesignatedSum)
        template += '''</table>'''
        template += '''<table id="trnoborder">
            <tr id="trnoborder">
                <td><h4>Reference</h4></td>
                <td><h4>Status</h4></td>
                <td><h4>Deposited</h4></td>
                <td><h4>General</h4></td>
                <td><h4>Designated</h4></td>
                <td><h4>NC</h4></td>
                <td class="left-border"><h4>Contributions</h4></td>
                <td class="total-cell"><h4>Grand</h4></td>
            </td>
        '''
        
        GrandTotalDetailGenDes = 0.00
        GrandTotalDetailGen = 0.00
        GrandTotalDetailDes = 0.00  
        GrandTotalDetailNon = 0.00
        GrandDetailTotal = 0.00
        
        #loop through each batch for the bundle
        for dd in sqlDetailsData:
    
            #Row Totals
            TotalDetailGenDes = dd.General + dd.Designated
            #Column Totals
            GrandTotalDetailGenDes += TotalDetailGenDes 
            GrandTotalDetailGen += dd.General
            GrandTotalDetailDes += dd.Designated
            GrandTotalDetailNon += dd.NonContribution
            GrandDetailTotal += dd.General + dd.Designated + dd.NonContribution
            
            FundDetails = ''
            if dd.SourceType is None:
                cType = ''
                cType = str(dd.ContributionType)
            else:
                cType = str(dd.ContributionType) + ' (' + str(dd.SourceType) + ')'
    
            if ShowDesignatedDetails == 'yes':
                #if dd.Designated != 0.00:
                CombinedFunds = GeneralFundIds + ',' + ExcludedFundIds
                sqlFundDetailsData = q.QuerySql(sqlFundDetails.format(dd.BundleHeaderId,CombinedFunds))
                for fd in sqlFundDetailsData:
                    FundDetails += '''<tr>
                                        <td class="top-border">&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp''' + str(fd.Fund) + '''</td>
                                        <td class="top-border"></td>
                                        <td class="top-border"></td>
                                        <td class="top-border">''' + checkNeg(fd.General) + '''</td>
                                        <td class="top-border">''' + checkNeg(fd.Designated) + '''</td>
                                        <td class="top-border">''' + checkNeg(fd.NonContribution) + '''</td>
                                        <td class="left-border"></td>
                                        <td class="total-cell"></td>
                                    </tr>
                                        '''
    
            ReferenceId = '''<a href="/Batches/Detail/''' + str(dd.BundleHeaderId) + '''" target="_blank">''' + dd.ReferenceId + '''</a>&nbsp<a href="/PyScript/''' + BundleReportName + '''?p1=''' + str(dd.BundleHeaderId) + '''" target="_blank"><i class="fa fa-bar-chart" aria-hidden="true"></i></a>'''
            template += '''
                <tr>
                    <td>{0}</td>
                    <td>{1}</td>
                    <td>{2}</td>
                    <td>{3}</td>
                    <td>{4}</td>
                    <td>{5}</td>
                    <td class="left-border">{6}</td>
                    <td class="total-cell">{7}</td>
                </tr>
                {8}    
                '''.format(ReferenceId,dd.BundleStatus,dd.DepositDate,checkNeg(dd.General),checkNeg(dd.Designated),checkNeg(dd.NonContribution),checkNeg(dd.General + dd.Designated),checkNeg(dd.TotalContribution),FundDetails)
    
        template += '''
            <tr>
                <td></td>
                <td></td>
                <td></td>
                <td><h4>{0}</h4></td>
                <td><h4>{1}</h4></td>
                <td><h4>{2}</h4></td>
                <td class="left-border"><h4>{3}</h4></td>
                <td class="total-cell"><h4>{4}</h4></td>
            </tr>
        </table></br>
        '''.format(checkNeg(GrandTotalDetailGen),checkNeg(GrandTotalDetailDes),checkNeg(GrandTotalDetailNon),checkNeg(GrandTotalDetailGenDes),checkNeg(GrandDetailTotal))
    
        template += '''</table></br>'''
    
    NMReport = model.RenderTemplate(template) #render template and save to variable
    
    #send report to self if button is pressed
    if sendReport == 'y': 
        #Add Link Tracking
        NMReport += '{track}{tracklinks}<br />'
        
        #Set variables
        QueuedBy = model.UserPeopleId   # People ID of record the email should be queued by
        MailToQuery = model.UserPeopleId # '3134' 
    
        #Email
        model.Email(MailToQuery, QueuedBy, FromAddress, FromName, Subject, NMReport)
        
        #Notifiy User Report Sent
        print('<h3>Report Sent to Self</h3>') #Let people know report was sent
    else:
        #show button if sendReport <> y and print to screen the rendered template
        print '''<a href="?sendReport=y&sDate=''' + sDate + '''&eDate=''' + eDate + '''&ShowDesignatedDetails=''' + ShowDesignatedDetails + '''" target="_blank"><button type="button">Email to Self</button></a><hr>'''
        print(NMReport)
