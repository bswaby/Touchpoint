#####################################################################
####FORTIS REPORT INFORMATION
#####################################################################
#Fortis report is a tool for finance to help backcharge ministry for
#finance fees. 
#
#Note:
#  Total received seems to be accurate!... but fees are not quite 100%
#  Couple of things that affect that are CC update feature fees and 
#  reversals that do not make it back to TP.  

#Installation:
#  Installation is easy, but it does require rights to Special Content.
#  1. Copy all this code
#  2. In TP, go to Admin~Advanced~Special Content~Python Scripts Tab
#  3. Select New Python Script File, Name the File, and click submit
#  4. Paste in the code, edit the charge variables below, and run
#  5. Add to menu if needed

# written by: Ben SWaby
# email: bswaby@fbchtn.org

#####################################################################
#### WORKFLOW OVERVIEW
#####################################################################
# ::WORKFLOW::
# 1. Initialize Configuration & Imports
# 2. Setup Fee Calculation Variables  
# 3. Define Currency Formatting Function
# 4. Build Dynamic SQL Query with CTEs
# 5. Generate HTML Form & Table Headers
# 6. Execute Query & Process Results
# 7. Calculate Row-Level Totals
# 8. Generate HTML Output with Styling
# 9. Display Final Report with Disclaimer

#####################################################################
####USER CONFIG FIELDS
#####################################################################
# ::START:: Configuration Setup
# This section defines all user-configurable variables for fee calculations

model.Header = 'Fortis Fees' #Page Name

# ::STEP:: ACH Fee Configuration
# Define percentage and per-transaction fees for ACH payments
ACHPercent = 0.05 #Use numeric.  0.05 = 5%
ACHPerTransaction = 0.50 

# ::STEP:: Credit Card Fee Configuration  
# Define percentage and per-transaction fees for standard CC payments
CCPercent = 0.05 #Use numeric.  0.05 = 5%
CCPerTransaction = 0.50 

# ::STEP:: American Express Fee Configuration
# Define percentage and per-transaction fees for Amex payments (typically higher)
AmexPercent = 0.05 #Use numeric.  0.05 = 5%
AmexPerTransaction = 0.50 
# ::END:: Configuration Setup

#######################################################################
####START OF CODE.  No configuration should be needed beyond this point
#######################################################################
#######################################################################

# ::START:: System Initialization
# Import required libraries and setup date handling
import datetime
from decimal import Decimal

# ::STEP:: Date Processing
# Get current date and extract user-provided date range from form submission
current_date = datetime.date.today().strftime("%B %d, %Y")
sDate = model.Data.sDate  # Start date from form
eDate = model.Data.eDate  # End date from form

# ::STEP:: Payment Type Mapping
# Define payment type codes used in TouchPoint database
ACHPaymentType = 'B' #This most likely won't need to change
CCPaymentType = 'C' #This most likely won't need to change.
AmexPaymentType = 'C' #This most likely won't need to change.
# ::END:: System Initialization

# ::START:: Currency Formatting Function
# Handles display formatting for monetary values with proper symbols and decimals
def format_currency(amount, show_dollar=True, use_comma=True):
    """
    Formats monetary amounts for display
    - Handles string/numeric conversion
    - Shows appropriate decimal places
    - Adds thousands separators
    - Returns "-" for zero values
    """
    # ::STEP:: Input Sanitization
    # Convert string amounts to float, removing currency symbols
    if isinstance(amount, str):
        amount = re.sub(r'[^\d.-]', '', amount)  # Remove non-numeric characters except "." and "-"
    
    amount = float(amount)  # Convert to float

    # ::STEP:: Zero Value Handling
    # Return dash for zero amounts to improve readability
    if amount == 0.00:
        return "-"

    # ::STEP:: Decimal Place Logic
    # Show cents for small amounts, whole dollars for larger amounts
    if amount % 1 != 0 or (1 <= amount < 10):
        formatted = "%.2f" % amount  # Show cents
    else:
        formatted = "%.0f" % amount  # No cents for whole numbers ($10+)

    # ::STEP:: Thousands Separator Addition
    # Add commas for readability in large numbers
    if use_comma:
        parts = formatted.split(".")  # Split whole number and decimal parts
        parts[0] = "{:,}".format(int(parts[0]))  # Add commas to the whole number part
        formatted = ".".join(parts)  # Reassemble

    return ("$" + formatted) if show_dollar else formatted
# ::END:: Currency Formatting Function

# ::START:: SQL Query Construction
# Build complex query with CTEs for filtered transactions and fee calculations
sql = """
-- ::CTE:: FilteredTransactions
-- First CTE handles different date filtering logic for ACH vs other payment types
WITH FilteredTransactions AS (
    SELECT 
        t.*,
        f.SettleDate,
        f.AccountType,
        f.FortisWebHookTransactionId
    FROM [Transaction] t 
    LEFT JOIN [FortisWebhookTransactions] f ON f.FortisWebHookTransactionId = t.TransactionId
    WHERE 
        (
            -- For ACH transactions, use SettleDate from Fortis webhook
            (t.PaymentType = '{4}' AND f.SettleDate BETWEEN '{0}' AND '{1} 23:59:59.999')
            OR
            -- For all other transactions, use standard settled date
            (t.PaymentType <> '{4}' AND t.settled BETWEEN '{0}' AND '{1} 23:59:59.999')
        )
        AND t.TransactionId IS NOT NULL
        AND t.voided IS NULL
),
-- ::CTE:: ExtractedData  
-- Second CTE calculates fees and extracts organization/program information
ExtractedData AS (
    SELECT 
        pro.Name AS Program,
        o.OrganizationId,
        -- Dynamic accounting code lookup (RegAccountCodeId takes precedence over XML)
        CASE 
            WHEN o.RegAccountCodeId IS NOT NULL THEN CAST(o.RegAccountCodeId AS NVARCHAR(50))
            ELSE o.RegSettingXML.value('(/Settings/Fees/AccountingCode)[1]', 'NVARCHAR(50)')
        END AS AccountingCode,
        ft.amt AS Amount,
        -- CC Fee Calculation (non-Amex credit cards)
        CASE 
            WHEN ft.PaymentType = '{7}' AND ft.AccountType <> 'amex'
            THEN CEILING(((ft.amt * {5}) + {6} + 0.00001) * 100) / 100
            ELSE 0 
        END AS CCFees,
        -- Amex Fee Calculation (separate rate for American Express)
        CASE 
            WHEN ft.PaymentType = '{10}' AND ft.AccountType = 'amex'
            THEN CEILING(((ft.amt * {8}) + {9} + 0.00001) * 100) / 100
            ELSE 0 
        END AS AmexFees,
        -- ACH Fee Calculation (bank transfers)
        CASE 
            WHEN ft.PaymentType = '{4}' 
            THEN CEILING(((ft.amt * {2}) + {3} + 0.00001) * 100) / 100
            ELSE 0 
        END AS ACHFees
    FROM FilteredTransactions ft
    LEFT JOIN Organizations o ON o.OrganizationId = ft.OrgId
    LEFT JOIN Division d ON d.Id = o.DivisionId
    LEFT JOIN Program pro ON pro.Id = d.ProgId
)
-- ::QUERY:: Final Results
-- Group by program and accounting code, sum all amounts and fees
SELECT 
    ed.Program,
    CONCAT(ac.Description, ' (', ac.Code, ')') AS AccountingCode,
    SUM(ed.Amount) AS Amount,
    SUM(ed.CCFees) AS CCFees,
    SUM(ed.AmexFees) AS AmexFees,
    SUM(ed.ACHFees) AS ACHFees
FROM ExtractedData ed
LEFT JOIN lookup.AccountCode ac ON ac.Id = ed.AccountingCode
GROUP BY ed.Program, ac.Code, ac.Description
ORDER BY ed.Program;
"""
# ::END:: SQL Query Construction

# ::START:: Legacy SQL (Preserved for Reference)
# Original query kept for comparison and rollback purposes
sqlold = '''
WITH ExtractedData AS (
    SELECT 
        pro.Name AS Program,
        o.OrganizationId,
        --o.RegSettingXML.value('(/Settings/Fees/AccountingCode)[1]', 'NVARCHAR(50)') AS AccountingCode, -- Extract AccountingCode
        CASE 
            WHEN o.RegAccountCodeId IS NOT NULL THEN CAST(o.RegAccountCodeId AS NVARCHAR(50))
            ELSE o.RegSettingXML.value('(/Settings/Fees/AccountingCode)[1]', 'NVARCHAR(50)')
        END AS AccountingCode, -- Check for RegAccountCodeId first
        t.amt AS Amount,
        CASE 
            WHEN t.PaymentType = '{7}' and f.AccountType <> 'amex'
            THEN CEILING(((t.amt * {5}) + {6} + 0.00001) * 100) / 100
            ELSE 0 
        END AS CCFees,
        CASE 
            WHEN t.PaymentType = '{10}' and f.AccountType = 'amex'
            THEN CEILING(((t.amt * {8}) + {9} + 0.00001) * 100) / 100
            ELSE 0 
        END AS AmexFees,
        CASE 
            WHEN t.PaymentType = '{4}' 
            THEN CEILING(((t.amt * {2}) + {3} + 0.00001) * 100) / 100
            ELSE 0 
        END AS ACHFees
    FROM [Transaction] t 
    LEFT JOIN Organizations o ON o.OrganizationId = t.OrgId
    LEFT JOIN Division d ON d.Id = o.DivisionId
    LEFT JOIN Program pro ON pro.Id = d.ProgId
	LEFT JOIN [FortisWebhookTransactions] f on f.FortisWebHookTransactionId = t.TransactionId
    WHERE 
        t.settled BETWEEN '{0}' AND '{1} 23:59:59.999'
        AND t.TransactionId IS NOT NULL
        --AND t.AuthCode IS NOT NULL
        AND t.voided IS NULL
)
SELECT 
    ed.Program,
    CONCAT(ac.Description, ' (', ac.Code, ')') AS AccountingCode,
    SUM(ed.Amount) AS Amount,
    SUM(ed.CCFees) AS CCFees,
    SUM(ed.AmexFees) AS AmexFees,
    SUM(ed.ACHFees) AS ACHFees
FROM ExtractedData ed
LEFT JOIN lookup.AccountCode ac ON ac.Id = ed.AccountingCode
GROUP BY ed.Program, ac.Code, ac.Description
ORDER BY ed.Program;
'''
# ::END:: Legacy SQL

# ::START:: Form Date Value Processing
# Handle pre-population of date fields from previous form submissions
if sDate is not None:
    optionsDate = ' value="' + sDate + '"'

if eDate is not None:
    optioneDate = ' value="' + eDate + '"'
# ::END:: Form Date Value Processing

# ::START:: HTML Header Template Generation
# Create styled form and table header with responsive design
headerTemplate = '''
    <style>
        .fortis-container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }}
        .form-container {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }}
        .form-container label {{
            color: white;
            font-weight: 600;
            margin-right: 10px;
            font-size: 14px;
        }}
        .form-container input[type="date"] {{
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            margin: 0 15px 0 5px;
            font-size: 14px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .form-container input[type="submit"] {{
            background: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            margin-left: 10px;
            transition: background 0.3s ease;
        }}
        .form-container input[type="submit"]:hover {{
            background: #45a049;
        }}
        .report-table {{
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }}
        .report-table th {{
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 15px 12px;
            text-align: left;
            font-weight: 600;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        .report-table td {{
            padding: 12px;
            border-bottom: 1px solid #ecf0f1;
            font-size: 14px;
        }}
        .report-table tr:hover {{
            background-color: #f8f9fa;
        }}
        .amount-col {{ text-align: right; font-weight: 500; }}
        .fee-col {{ 
            text-align: right; 
            font-weight: 500;
            color: #e74c3c;
        }}
        .card-total-col {{ 
            text-align: right; 
            font-weight: 600;
            color: #f39c12;
            background-color: #fef9e7;
        }}
        .total-col {{ 
            text-align: right; 
            font-weight: 700;
            color: #27ae60;
            background-color: #eafaf1;
        }}
        .grand-total-row {{
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            font-weight: 700;
        }}
        .grand-total-row td {{
            border-bottom: none;
            padding: 15px 12px;
        }}
        .disclaimer {{
            background: #f8f9fa;
            border-left: 4px solid #17a2b8;
            padding: 15px 20px;
            margin-top: 20px;
            border-radius: 0 8px 8px 0;
            font-size: 13px;
            color: #495057;
            line-height: 1.5;
        }}
        .disclaimer-title {{
            font-weight: 600;
            color: #17a2b8;
            margin-bottom: 8px;
        }}
    </style>
    <div class="fortis-container">
        <div class="form-container">
            <form action="" method="GET">
                <label for="sDate">Start Date:</label>
                <input type="date" id="sDate" name="sDate" required {0}>
                <label for="eDate">End Date:</label>
                <input type="date" id="eDate" name="eDate" required {1}>
                <input type="submit" value="Generate Report">
            </form>
        </div>
        <table class="report-table">
            <thead>
                <tr>
                    <th>Program</th>
                    <th>Accounting Code</th>
                    <th>Transaction Amount</th>
                    <th>CC Fees</th>
                    <th>Amex Fees</th>
                    <th>ACH Fees</th>
                    <th style="background: #f39c12;">Card Fees Total</th>
                    <th style="background: #27ae60;">All Fees Total</th>
                </tr>
            </thead>
            <tbody>
'''.format(optionsDate,optioneDate)
# ::END:: HTML Header Template Generation

# ::START:: SQL Query Execution
# Execute the dynamic SQL query with all fee calculation parameters
rsql = q.QuerySql(sql.format(sDate,              # {0} - Start Date
                             eDate,              # {1} - End Date  
                             ACHPercent,         # {2} - ACH Percentage
                             ACHPerTransaction,  # {3} - ACH Per Transaction Fee
                             ACHPaymentType,     # {4} - ACH Payment Type Code
                             CCPercent,          # {5} - CC Percentage
                             CCPerTransaction,   # {6} - CC Per Transaction Fee
                             CCPaymentType,      # {7} - CC Payment Type Code
                             AmexPercent,        # {8} - Amex Percentage
                             AmexPerTransaction, # {9} - Amex Per Transaction Fee
                             AmexPaymentType))   # {10} - Amex Payment Type Code
# ::END:: SQL Query Execution

# ::START:: Data Processing & HTML Generation
# Process query results and build HTML table rows with calculated totals
bodyTemplate = '' 

# ::STEP:: Initialize Grand Total Variables
# Track running totals across all rows for final summary
TotalFortis = 0         # Total transaction amounts
TotalFortisCC = 0       # Total CC fees
TotalFortisAmex = 0     # Total Amex fees
TotalFortisACH = 0      # Total ACH fees
TotalFortisCardFees = 0 # Total card fees (CC + Amex)
TotalFortisFees = 0     # Total all fees (CC + Amex + ACH)

# ::STEP:: Process Each Result Row
# Loop through query results to calculate row totals and build HTML
for f in rsql:
    # ::SUBSTEP:: Calculate Row-Level Totals
    # Compute card fees (CC + Amex) and total fees for this row
    cardFees = (f.CCFees if f.CCFees is not None else Decimal(0)) + \
               (f.AmexFees if f.AmexFees is not None else Decimal(0))
    
    totalFees = cardFees + (f.ACHFees if f.ACHFees is not None else Decimal(0))  

    # ::SUBSTEP:: Update Grand Totals
    # Add current row values to running totals
    TotalFortis += f.Amount or 0
    TotalFortisCC += f.CCFees or 0
    TotalFortisAmex += f.AmexFees or 0
    TotalFortisACH += f.ACHFees or 0
    TotalFortisCardFees += cardFees or 0
    TotalFortisFees += totalFees or 0
    
    # ::SUBSTEP:: Generate HTML Table Row
    # Create formatted table row with styled columns for each data type
    bodyTemplate += '''
                <tr>
                    <td>{0}</td>
                    <td>{1}</td>
                    <td class="amount-col">{2}</td>
                    <td class="fee-col">{3}</td>
                    <td class="fee-col">{4}</td>
                    <td class="fee-col">{5}</td>
                    <td class="card-total-col">{6}</td>
                    <td class="total-col">{7}</td>
                </tr>
    '''.format(f.Program if f.Program is not None else "",
               f.AccountingCode if f.AccountingCode is not None else "",
               format_currency(f.Amount if f.Amount is not None else 0),
               format_currency(f.CCFees if f.CCFees is not None else 0),
               format_currency(f.AmexFees if f.AmexFees is not None else 0),
               format_currency(f.ACHFees if f.ACHFees is not None else 0),
               format_currency(cardFees if cardFees is not None else 0),
               format_currency(totalFees if totalFees is not None else 0))

# ::STEP:: Generate Footer with Grand Totals
# Add final row showing totals across all programs and accounting codes               
bodyTemplate += '''
            </tbody>
            <tfoot>
                <tr class="grand-total-row">
                    <td colspan="2"><strong>GRAND TOTALS</strong></td>
                    <td style="text-align: right;"><strong>{0}</strong></td>
                    <td style="text-align: right;"><strong>{1}</strong></td>
                    <td style="text-align: right;"><strong>{2}</strong></td>
                    <td style="text-align: right;"><strong>{3}</strong></td>
                    <td style="text-align: right;"><strong>{4}</strong></td>
                    <td style="text-align: right;"><strong>{5}</strong></td>
                </tr>
            </tfoot>
        </table>
        <div class="disclaimer">
            <div class="disclaimer-title">Important Note:</div>
            This report is based on transaction data within TouchPoint. Please note that credit card update feature fees and some reversals may not be reflected back to TouchPoint, which could result in slight discrepancies between this report and actual processing fees charged by Fortis.
        </div>
    </div>'''.format(format_currency(TotalFortis),
                       format_currency(TotalFortisCC),
                       format_currency(TotalFortisAmex),
                       format_currency(TotalFortisACH),
                       format_currency(TotalFortisCardFees),
                       format_currency(TotalFortisFees))
# ::END:: Data Processing & HTML Generation

# ::START:: Final Report Assembly & Output
# Combine header and body templates and render final report
Report = model.RenderTemplate(headerTemplate)
Report += model.RenderTemplate(bodyTemplate)
print Report
# ::END:: Final Report Assembly & Output

#####################################################################
#### WORKFLOW VISUALIZATION HELPER
#####################################################################
# ::START:: Workflow Outline Generator
# Simple function to extract and display workflow structure from comments
def show_workflow_outline():
    """
    Scans this file for ::WORKFLOW::, ::START::, ::STEP::, and ::END:: 
    comments to build a visual outline of the process flow
    """
    outline = """
FORTIS FEES REPORT - WORKFLOW OUTLINE
=====================================

1. INITIALIZATION PHASE
   ├── Configuration Setup
   │   ├── ACH Fee Configuration  
   │   ├── Credit Card Fee Configuration
   │   └── American Express Fee Configuration
   ├── System Initialization
   │   ├── Date Processing
   │   └── Payment Type Mapping
   └── Currency Formatting Function
       ├── Input Sanitization
       ├── Zero Value Handling  
       ├── Decimal Place Logic
       └── Thousands Separator Addition

2. SQL CONSTRUCTION PHASE
   ├── FilteredTransactions CTE (Date filtering logic)
   ├── ExtractedData CTE (Fee calculations)
   └── Final Results Query (Grouping & Sorting)

3. HTML GENERATION PHASE
   ├── Form Date Value Processing
   ├── HTML Header Template Generation
   └── CSS Styling Application

4. DATA PROCESSING PHASE
   ├── SQL Query Execution
   ├── Initialize Grand Total Variables
   ├── Process Each Result Row
   │   ├── Calculate Row-Level Totals
   │   ├── Update Grand Totals
   │   └── Generate HTML Table Row
   └── Generate Footer with Grand Totals

5. OUTPUT PHASE
   └── Final Report Assembly & Output

DATA FLOW:
TouchPoint Transaction Data → Date Filtering → Fee Calculations → HTML Formatting → Final Report
"""
    return outline

# Uncomment the line below to see the workflow outline:
# print show_workflow_outline()
# ::END:: Workflow Outline Generator
