#####################################################################
####FORTIS REPORT INFORMATION
#####################################################################
#Fortis report is a tool for finance to help backcharge ministry for
#finance fees. 
#
#Note:
#  Total received seems to be accurate!... but fees are not quite 100%
#  Couple of things that affect that are CC update feature fees and 
#  reversals that do not make it back to TP.  

#Installation:
#  Installation is easy, but it does require rights to Special Content.
#  1. Copy all this code
#  2. In TP, go to Admin~Advanced~Special Content~Python Scripts Tab
#  3. Select New Python Script File, Name the File, and click submit
#  4. Paste in the code and run
#  5. Add to menu if needed


#####################################################################
####USER CONFIG FIELDS
#####################################################################
#These are defined variables that are required for the report to run.

model.Header = 'Fortis Fees' #Page Name

#ACH Charge
ACHPercent = 0.05 #Use numeric.  0.05 = 5%
ACHPerTransaction = 0.50 

#CC Charge
CCPercent = 0.05 #Use numeric.  0.05 = 5%
CCPerTransaction = 0.50 

#AMEX Charges
AmexPercent = 0.05 #Use numeric.  0.05 = 5%
AmexPerTransaction = 0.50 

#######################################################################
####START OF CODE.  No configuration should be needed beyond this point
#######################################################################
#######################################################################
import datetime
from decimal import Decimal


current_date = datetime.date.today().strftime("%B %d, %Y")
sDate = model.Data.sDate
eDate = model.Data.eDate

ACHPaymentType = 'B' #This most likely won't need to change
CCPaymentType = 'C' #This most likely won't need to change.
AmexPaymentType = 'C' #This most likely won't need to change.

#update currency
def format_currency(amount, show_dollar=True, use_comma=True):
    # If amount is a string, remove "$" and "," before converting to float
    if isinstance(amount, str):
        amount = re.sub(r'[^\d.-]', '', amount)  # Remove non-numeric characters except "." and "-"
    
    amount = float(amount)  # Convert to float

    # Return "-" for zero values
    if amount == 0.00:
        return "-"

    # Determine decimal places
    if amount % 1 != 0 or (1 <= amount < 10):
        formatted = "%.2f" % amount  # Show cents
    else:
        formatted = "%.0f" % amount  # No cents for whole numbers ($10+)

    # Add thousands separators manually if needed
    if use_comma:
        parts = formatted.split(".")  # Split whole number and decimal parts
        parts[0] = "{:,}".format(int(parts[0]))  # Add commas to the whole number part
        formatted = ".".join(parts)  # Reassemble

    return ("$" + formatted) if show_dollar else formatted

sql = '''
WITH ExtractedData AS (
    SELECT 
        pro.Name AS Program,
        o.OrganizationId,
        --o.RegSettingXML.value('(/Settings/Fees/AccountingCode)[1]', 'NVARCHAR(50)') AS AccountingCode, -- Extract AccountingCode
        CASE 
            WHEN o.RegAccountCodeId IS NOT NULL THEN CAST(o.RegAccountCodeId AS NVARCHAR(50))
            ELSE o.RegSettingXML.value('(/Settings/Fees/AccountingCode)[1]', 'NVARCHAR(50)')
        END AS AccountingCode, -- Check for RegAccountCodeId first
	t.amt AS Amount,
        CASE 
            WHEN t.PaymentType = '{7}' and f.AccountType <> 'amex'
            THEN CEILING(((t.amt * {5}) + {6} + 0.00001) * 100) / 100
            ELSE 0 
        END AS CCFees,
        CASE 
            WHEN t.PaymentType = '{10}' and f.AccountType = 'amex'
            THEN CEILING(((t.amt * {8}) + {9} + 0.00001) * 100) / 100
            ELSE 0 
        END AS AmexFees,
        CASE 
            WHEN t.PaymentType = '{4}' 
            THEN CEILING(((t.amt * {2}) + {3} + 0.00001) * 100) / 100
            ELSE 0 
        END AS ACHFees
    FROM [Transaction] t 
    LEFT JOIN Organizations o ON o.OrganizationId = t.OrgId
    LEFT JOIN Division d ON d.Id = o.DivisionId
    LEFT JOIN Program pro ON pro.Id = d.ProgId
	LEFT JOIN [FortisWebhookTransactions] f on f.FortisWebHookTransactionId = t.TransactionId
    WHERE 
        t.settled BETWEEN '{0}' AND '{1} 23:59:59.999'
        AND t.TransactionId IS NOT NULL
        AND t.AuthCode IS NOT NULL
        AND t.voided IS NULL
)
SELECT 
    ed.Program,
    CONCAT(ac.Description, ' (', ac.Code, ')') AS AccountingCode,
    SUM(ed.Amount) AS Amount,
    SUM(ed.CCFees) AS CCFees,
    SUM(ed.AmexFees) AS AmexFees,
    SUM(ed.ACHFees) AS ACHFees
FROM ExtractedData ed
LEFT JOIN lookup.AccountCode ac ON ac.Id = ed.AccountingCode
GROUP BY ed.Program, ac.Code, ac.Description
ORDER BY ed.Program;
'''

if sDate is not None:
    optionsDate = ' value="' + sDate + '"'

if eDate is not None:
    optioneDate = ' value="' + eDate + '"'


headerTemplate = '''
    <form action="" method="GET">
        <label for="sDate">Start:</label>
        <input type="date" id="sDate" name="sDate" required {0}>
        <label for="eDate">End:</label>
        <input type="date" id="eDate" name="eDate" required {1}>
        <input type="submit" value="Submit">
    </form>
    <br>
    <table style="width: 100%; border-collapse: collapse; font-family: Arial, sans-serif; text-align: left;">
         <tr style="background-color: #f4f4f4; font-weight: bold;">
            <td>Program</td>
            <td>Accounting Code</td>
            <td>Amount</td>
            <td>CC Fees</td>
            <td>Amex Fees</td>
            <td>ACH Fees</td>
            <td>Total Fees</td>
        </tr>
'''.format(optionsDate,optioneDate)

rsql = q.QuerySql(sql.format(sDate,
                             eDate,
                             ACHPercent,
                             ACHPerTransaction,
                             ACHPaymentType,
                             CCPercent,
                             CCPerTransaction,
                             CCPaymentType,
                             AmexPercent,
                             AmexPerTransaction,
                             AmexPaymentType))

bodyTemplate = '' 
TotalFortis = 0
TotalFortisCC = 0
TotalFortisAmex = 0
TotalFortisACH = 0
TotalFortisFees = 0

#for f in rsql:
    #ColumnTotal
#    totalFees = f.CCFees + f.ACHFees + f.AmexFees

for f in rsql:
    # Column Total
    totalFees = (f.CCFees if f.CCFees is not None else Decimal(0)) + \
                (f.ACHFees if f.ACHFees is not None else Decimal(0)) + \
                (f.AmexFees if f.AmexFees is not None else Decimal(0))  

    #Grand Total
    TotalFortis += f.Amount or 0
    TotalFortisCC += f.CCFees or 0
    TotalFortisAmex += f.AmexFees or 0
    TotalFortisACH += f.ACHFees or 0
    TotalFortisFees += totalFees or 0
    
    bodyTemplate += '''
        <tr>
            <td>{0}</td>
            <td>{1}</td>
            <td>{2}</td>
            <td>{3}</td>
            <td>{4}</td>
            <td>{5}</td>
            <td>{6}</td>
        </tr>
    '''.format(f.Program if f.Program is not None else "",
               f.AccountingCode if f.AccountingCode is not None else "",
               format_currency(f.Amount if f.Amount is not None else 0),
               format_currency(f.CCFees if f.CCFees is not None else 0),
               format_currency(f.AmexFees if f.AmexFees is not None else 0),
               format_currency(f.ACHFees if f.ACHFees is not None else 0),
               format_currency(totalFees if totalFees is not None else 0))
               

bodyTemplate += '''
    <tr>
        <td></td>
        <td></td>
        <td><strong>{0}</strong></td>
        <td><strong>{1}</strong></td>
        <td><strong>{2}</strong></td>
        <td><strong>{3}</strong></td>
        <td><strong>{4}</strong></td>
    </tr>
    </table>'''.format(format_currency(TotalFortis),
                       format_currency(TotalFortisCC),
                       format_currency(TotalFortisAmex),
                       format_currency(TotalFortisACH),
                       format_currency(TotalFortisFees))


Report = model.RenderTemplate(headerTemplate)
Report += model.RenderTemplate(bodyTemplate)
print Report
