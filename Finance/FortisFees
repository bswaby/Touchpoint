#####################################################################
####FORTIS REPORT INFORMATION
#####################################################################
#Fortis report is a tool for finance to help backcharge ministry for
#finance fees. 
#
#Note:
#  Total received seems to be accurate!... but fees are not quite 100%
#  Couple of things that affect that are CC update feature fees and 
#  reversals that do not make it back to TP.  

#Installation:
#  Installation is easy, but it does require rights to Special Content.
#  1. Copy all this code
#  2. In TP, go to Admin~Advanced~Special Content~Python Scripts Tab
#  3. Select New Python Script File, Name the File, and click submit
#  4. Paste in the code, edit the charge variables below, and run
#  5. Add to menu if needed
#
# written by: Ben Swaby
# email: bswaby@fbchtn.org


#####################################################################
####USER CONFIG FIELDS
#####################################################################
#These are defined variables that are required for the report to run.

model.Header = 'Fortis Fees' #Page Name

#ACH Charge
ACHPercent = 0.05 #Use numeric.  0.05 = 5%
ACHPerTransaction = 0.50 

#CC Charge
CCPercent = 0.05 #Use numeric.  0.05 = 5%
CCPerTransaction = 0.50 

#AMEX Charges
AmexPercent = 0.05 #Use numeric.  0.05 = 5%
AmexPerTransaction = 0.50 


#######################################################################
####START OF CODE.  No configuration should be needed beyond this point
#######################################################################
#######################################################################
import datetime
from decimal import Decimal


current_date = datetime.date.today().strftime("%B %d, %Y")
sDate = model.Data.sDate
eDate = model.Data.eDate

ACHPaymentType = 'B' #This most likely won't need to change
CCPaymentType = 'C' #This most likely won't need to change.
AmexPaymentType = 'C' #This most likely won't need to change.

#update currency
def format_currency(amount, show_dollar=True, use_comma=True):
    # If amount is a string, remove "$" and "," before converting to float
    if isinstance(amount, str):
        amount = re.sub(r'[^\d.-]', '', amount)  # Remove non-numeric characters except "." and "-"
    
    amount = float(amount)  # Convert to float

    # Return "-" for zero values
    if amount == 0.00:
        return "-"

    # Determine decimal places
    if amount % 1 != 0 or (1 <= amount < 10):
        formatted = "%.2f" % amount  # Show cents
    else:
        formatted = "%.0f" % amount  # No cents for whole numbers ($10+)

    # Add thousands separators manually if needed
    if use_comma:
        parts = formatted.split(".")  # Split whole number and decimal parts
        parts[0] = "{:,}".format(int(parts[0]))  # Add commas to the whole number part
        formatted = ".".join(parts)  # Reassemble

    return ("$" + formatted) if show_dollar else formatted

sql = """
WITH FilteredTransactions AS (
    SELECT 
        t.*,
        f.SettleDate,
        f.AccountType,
        f.FortisWebHookTransactionId
    FROM [Transaction] t 
    LEFT JOIN [FortisWebhookTransactions] f ON f.FortisWebHookTransactionId = t.TransactionId
    WHERE 
        (
            -- For ACH transactions, use SettleDate
            (t.PaymentType = '{4}' AND f.SettleDate BETWEEN '{0}' AND '{1} 23:59:59.999')
            OR
            -- For all other transactions, use settled date
            (t.PaymentType <> '{4}' AND t.settled BETWEEN '{0}' AND '{1} 23:59:59.999')
        )
        AND t.TransactionId IS NOT NULL
        AND t.voided IS NULL
),
ExtractedData AS (
    SELECT 
        pro.Name AS Program,
        o.OrganizationId,
        CASE 
            WHEN o.RegAccountCodeId IS NOT NULL THEN CAST(o.RegAccountCodeId AS NVARCHAR(50))
            ELSE o.RegSettingXML.value('(/Settings/Fees/AccountingCode)[1]', 'NVARCHAR(50)')
        END AS AccountingCode,
        ft.amt AS Amount,
        CASE 
            WHEN ft.PaymentType = '{7}' AND ft.AccountType <> 'amex'
            THEN CEILING(((ft.amt * {5}) + {6} + 0.00001) * 100) / 100
            ELSE 0 
        END AS CCFees,
        CASE 
            WHEN ft.PaymentType = '{10}' AND ft.AccountType = 'amex'
            THEN CEILING(((ft.amt * {8}) + {9} + 0.00001) * 100) / 100
            ELSE 0 
        END AS AmexFees,
        CASE 
            WHEN ft.PaymentType = '{4}' 
            THEN CEILING(((ft.amt * {2}) + {3} + 0.00001) * 100) / 100
            ELSE 0 
        END AS ACHFees
    FROM FilteredTransactions ft
    LEFT JOIN Organizations o ON o.OrganizationId = ft.OrgId
    LEFT JOIN Division d ON d.Id = o.DivisionId
    LEFT JOIN Program pro ON pro.Id = d.ProgId
)
SELECT 
    ed.Program,
    CONCAT(ac.Description, ' (', ac.Code, ')') AS AccountingCode,
    SUM(ed.Amount) AS Amount,
    SUM(ed.CCFees) AS CCFees,
    SUM(ed.AmexFees) AS AmexFees,
    SUM(ed.ACHFees) AS ACHFees
FROM ExtractedData ed
LEFT JOIN lookup.AccountCode ac ON ac.Id = ed.AccountingCode
GROUP BY ed.Program, ac.Code, ac.Description
ORDER BY ed.Program;
"""

sqlold = '''
WITH ExtractedData AS (
    SELECT 
        pro.Name AS Program,
        o.OrganizationId,
        --o.RegSettingXML.value('(/Settings/Fees/AccountingCode)[1]', 'NVARCHAR(50)') AS AccountingCode, -- Extract AccountingCode
        CASE 
            WHEN o.RegAccountCodeId IS NOT NULL THEN CAST(o.RegAccountCodeId AS NVARCHAR(50))
            ELSE o.RegSettingXML.value('(/Settings/Fees/AccountingCode)[1]', 'NVARCHAR(50)')
        END AS AccountingCode, -- Check for RegAccountCodeId first
        t.amt AS Amount,
        CASE 
            WHEN t.PaymentType = '{7}' and f.AccountType <> 'amex'
            THEN CEILING(((t.amt * {5}) + {6} + 0.00001) * 100) / 100
            ELSE 0 
        END AS CCFees,
        CASE 
            WHEN t.PaymentType = '{10}' and f.AccountType = 'amex'
            THEN CEILING(((t.amt * {8}) + {9} + 0.00001) * 100) / 100
            ELSE 0 
        END AS AmexFees,
        CASE 
            WHEN t.PaymentType = '{4}' 
            THEN CEILING(((t.amt * {2}) + {3} + 0.00001) * 100) / 100
            ELSE 0 
        END AS ACHFees
    FROM [Transaction] t 
    LEFT JOIN Organizations o ON o.OrganizationId = t.OrgId
    LEFT JOIN Division d ON d.Id = o.DivisionId
    LEFT JOIN Program pro ON pro.Id = d.ProgId
	LEFT JOIN [FortisWebhookTransactions] f on f.FortisWebHookTransactionId = t.TransactionId
    WHERE 
        t.settled BETWEEN '{0}' AND '{1} 23:59:59.999'
        AND t.TransactionId IS NOT NULL
        --AND t.AuthCode IS NOT NULL
        AND t.voided IS NULL
)
SELECT 
    ed.Program,
    CONCAT(ac.Description, ' (', ac.Code, ')') AS AccountingCode,
    SUM(ed.Amount) AS Amount,
    SUM(ed.CCFees) AS CCFees,
    SUM(ed.AmexFees) AS AmexFees,
    SUM(ed.ACHFees) AS ACHFees
FROM ExtractedData ed
LEFT JOIN lookup.AccountCode ac ON ac.Id = ed.AccountingCode
GROUP BY ed.Program, ac.Code, ac.Description
ORDER BY ed.Program;
'''

if sDate is not None:
    optionsDate = ' value="' + sDate + '"'

if eDate is not None:
    optioneDate = ' value="' + eDate + '"'


headerTemplate = '''
    <style>
        .fortis-container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }}
        .form-container {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }}
        .form-container label {{
            color: white;
            font-weight: 600;
            margin-right: 10px;
            font-size: 14px;
        }}
        .form-container input[type="date"] {{
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            margin: 0 15px 0 5px;
            font-size: 14px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .form-container input[type="submit"] {{
            background: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            margin-left: 10px;
            transition: background 0.3s ease;
        }}
        .form-container input[type="submit"]:hover {{
            background: #45a049;
        }}
        .report-table {{
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }}
        .report-table th {{
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 15px 12px;
            text-align: left;
            font-weight: 600;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        .report-table td {{
            padding: 12px;
            border-bottom: 1px solid #ecf0f1;
            font-size: 14px;
        }}
        .report-table tr:hover {{
            background-color: #f8f9fa;
        }}
        .amount-col {{ text-align: right; font-weight: 500; }}
        .fee-col {{ 
            text-align: right; 
            font-weight: 500;
            color: #e74c3c;
        }}
        .card-total-col {{ 
            text-align: right; 
            font-weight: 600;
            color: #f39c12;
            background-color: #fef9e7;
        }}
        .total-col {{ 
            text-align: right; 
            font-weight: 700;
            color: #27ae60;
            background-color: #eafaf1;
        }}
        .grand-total-row {{
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            font-weight: 700;
        }}
        .grand-total-row td {{
            border-bottom: none;
            padding: 15px 12px;
        }}
        .disclaimer {{
            background: #f8f9fa;
            border-left: 4px solid #17a2b8;
            padding: 15px 20px;
            margin-top: 20px;
            border-radius: 0 8px 8px 0;
            font-size: 13px;
            color: #495057;
            line-height: 1.5;
        }}
        .disclaimer-title {{
            font-weight: 600;
            color: #17a2b8;
            margin-bottom: 8px;
        }}
    </style>
    <div class="fortis-container">
        <div class="form-container">
            <form action="" method="GET">
                <label for="sDate">Start Date:</label>
                <input type="date" id="sDate" name="sDate" required {0}>
                <label for="eDate">End Date:</label>
                <input type="date" id="eDate" name="eDate" required {1}>
                <input type="submit" value="Generate Report">
            </form>
        </div>
        <table class="report-table">
            <thead>
                <tr>
                    <th>Program</th>
                    <th>Accounting Code</th>
                    <th>Transaction Amount</th>
                    <th>CC Fees</th>
                    <th>Amex Fees</th>
                    <th>ACH Fees</th>
                    <th style="background: #f39c12;">Card Fees Total</th>
                    <th style="background: #27ae60;">All Fees Total</th>
                </tr>
            </thead>
            <tbody>
'''.format(optionsDate,optioneDate)

rsql = q.QuerySql(sql.format(sDate,
                             eDate,
                             ACHPercent,
                             ACHPerTransaction,
                             ACHPaymentType,
                             CCPercent,
                             CCPerTransaction,
                             CCPaymentType,
                             AmexPercent,
                             AmexPerTransaction,
                             AmexPaymentType))
                             

bodyTemplate = '' 
TotalFortis = 0
TotalFortisCC = 0
TotalFortisAmex = 0
TotalFortisACH = 0
TotalFortisCardFees = 0  # CC + Amex total
TotalFortisFees = 0     # All fees total


for f in rsql:
    # Column Totals
    cardFees = (f.CCFees if f.CCFees is not None else Decimal(0)) + \
               (f.AmexFees if f.AmexFees is not None else Decimal(0))
    
    totalFees = cardFees + (f.ACHFees if f.ACHFees is not None else Decimal(0))  

    #Grand Totals
    TotalFortis += f.Amount or 0
    TotalFortisCC += f.CCFees or 0
    TotalFortisAmex += f.AmexFees or 0
    TotalFortisACH += f.ACHFees or 0
    TotalFortisCardFees += cardFees or 0
    TotalFortisFees += totalFees or 0
    
    bodyTemplate += '''
                <tr>
                    <td>{0}</td>
                    <td>{1}</td>
                    <td class="amount-col">{2}</td>
                    <td class="fee-col">{3}</td>
                    <td class="fee-col">{4}</td>
                    <td class="fee-col">{5}</td>
                    <td class="card-total-col">{6}</td>
                    <td class="total-col">{7}</td>
                </tr>
    '''.format(f.Program if f.Program is not None else "",
               f.AccountingCode if f.AccountingCode is not None else "",
               format_currency(f.Amount if f.Amount is not None else 0),
               format_currency(f.CCFees if f.CCFees is not None else 0),
               format_currency(f.AmexFees if f.AmexFees is not None else 0),
               format_currency(f.ACHFees if f.ACHFees is not None else 0),
               format_currency(cardFees if cardFees is not None else 0),
               format_currency(totalFees if totalFees is not None else 0))
               

bodyTemplate += '''
            </tbody>
            <tfoot>
                <tr class="grand-total-row">
                    <td colspan="2"><strong>GRAND TOTALS</strong></td>
                    <td style="text-align: right;"><strong>{0}</strong></td>
                    <td style="text-align: right;"><strong>{1}</strong></td>
                    <td style="text-align: right;"><strong>{2}</strong></td>
                    <td style="text-align: right;"><strong>{3}</strong></td>
                    <td style="text-align: right;"><strong>{4}</strong></td>
                    <td style="text-align: right;"><strong>{5}</strong></td>
                </tr>
            </tfoot>
        </table>
        <div class="disclaimer">
            <div class="disclaimer-title">Important Note:</div>
            This report is based on transaction data within TouchPoint. Please note that credit card update feature fees and some reversals may not be reflected back to TouchPoint, which could result in slight discrepancies between this report and actual processing fees charged by Fortis.
        </div>
    </div>'''.format(format_currency(TotalFortis),
                       format_currency(TotalFortisCC),
                       format_currency(TotalFortisAmex),
                       format_currency(TotalFortisACH),
                       format_currency(TotalFortisCardFees),
                       format_currency(TotalFortisFees))


Report = model.RenderTemplate(headerTemplate)
Report += model.RenderTemplate(bodyTemplate)
print Report
